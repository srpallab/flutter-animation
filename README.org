#+title: Learn Flutter Animation
#+author: Md. Shafiqur Rahman
#+options: h:1 num:nil toc:nil


* What is Animation
A series of images or frames, that represent motion or change over
time.
* What are the main keys to do animation in Flutter?
** Animation Controller
Its responsible to control animation cycle. Repeat, Forward, reverse
etc. 
** Animation
Value that changes over time and can be used to animate widget or
other app elements.
** Tween
Values between which an animation can interpolate, such as a variety
of colors, angles, sizes, integers.
** AnimatedFoo or FooTransition Widget
Widgets that are used for different animations type.
** Animated Builder
A widget that gives developer more control, enabling them to set
unique animations for their widgets.
* What are animation concepts in Flutter?
** Duration
The time it takes to complete an animation is referred to as the
animation duration. A Flutter Duration object which represents a
period of time in milliseconds and seconds, can be used to specify
this. 
** Curves
Curves are mathematical operations that control the duration progress
of an animation. ~Curves.linear~, ~Curves.easeIn~, ~Curves.easeOut~,
and ~Curves.easeInOut~ are just a few of the build-in curves offered by
Flutter. These curves can be used to create a variety of effects,
including gradual acceleration and deceleration.
#+begin_src dart 
  _radiusAnimation = Tween(
    begin: 20.0,
    end: 400.0,
  ).chain(
    CurveTween(curve: Curves.bounceInOut)
  ).animate(_radiusController);
#+end_src

** Interpolations
Interpolation is used to create smooth transitions between the
starting and ending states of an animation.
#+begin_src dart
  Animation<double> animation = Tween<double>(begin:0,end:10)
                                .animate(controller);
    #+end_src
* What are animation types in Flutter?
** Implicit
No need to control it. It is less complex and takes less coding to
implement than explicit animations, but they may be less customizable
in terms of the duration, curve and other aspects of the animation
** Explicit
Developer need to control it. This animations are triggered manually
by the developer, such as when a button is pressed or when a certain
condition is met. In an explicit animation, the developer is
responsible for specifying the animation duration, curve and other properties.
** Low Level Animation
Need to create and control it. Custom painter.
** Third party animation framework
Put and go. Flare(Rive) or Lottie.
* Flutter Animation Decision Tree
#+CAPTION: Flutter Animation Decision Tree
#+NAME:   fig:animation-decision-tree.png
[[./animation-decision-tree.png]]
* Animation Controller
Its the controller that used to control the animation of the
widget. Like Start, Progress, Stop.
#+begin_src dart
  final AnimationController _ctl = AnimationController(
    duration: const Duration(seconds: 5),
    vsync: this,
  )
#+end_src
* Animation Controller Process
** ~myController.forward()~
To Start Animation.
** ~myController.reverse()~
Reverse back the animation from the current position.
** ~myController.dispose()~
We need to dispose of the Animation controller when it is no longer
needed (keep memory free)
* What are animation controller properties?
** Listener
*** addListener
Is used to register a listener with an animation controller. Once
registered, the listener will be notified every time the animation
controller updates.
#+begin_src dart
  _animationController.addListener((){
      // Do something when the animation updates
  });
#+end_src

*** removeListener
Its important to note that if a listener is register with an animation
controller, it also needed to remove when its no longer used.
#+begin_src dart
  VoidCallback listener = (){
    // Do something when the animation updates
  }
  _animationController.addListener(listener);

  // remove it when needed
  _animationController.remove(listener);
#+end_src

** Status
This property is an enum that represents the current status of the
animation
*** ~AnimationStatus.forward~
It represents the status of an animation when it is playing forward
from its starting point to its ending point. When an animation is in
the froward status, its value property increases from 0.0 to 1.0 over
time.
#+begin_src dart
  _animationController.addListener((){
      if (_animationController.status == AnimationStatus.froward) {
	// Animation is playing forward from start to end
	// Perform some action, such as update UI
      }
  });
#+end_src
*** ~AnimationStatus.reverse~
It represents the status of an animation when it is playing in
reverse, from its ending point to its starting point. When an
animation is in the reverse status, its value property decreases from
1.0 to 0.0 over time.
#+begin_src dart
  _animationController.addListener((){
    if (_animationController.status == AnimationStatus.reverse) {
      // Animation is playing in reverse
      // Perform some action, such as update UI
    }
});
#+end_src
*** ~AnimationStatus.completed~
It represents the status of an animation when it has reached its end
point, by playing froward to the end. When an animation is in the
completed status, its value property status, its value property is
equal to 1.0
#+begin_src dart
  _animationController.addListener((){
    if (_animationController.status == AnimationStatus.completed) {
      // Animation has completed
      // Perform some action, such as update UI
    }
});
#+end_src
*** ~AnimationStatus.dismissed~
It represents the status of an animation when it has returned to its
starting point, either by playing in reverse to the start or by never
having been started at all. When an animation is in the dismissed
status, its value property is equal to 0.0
#+begin_src dart
  _animationController.addListener((){
    if (_animationController.status == AnimationStatus.dismissed) {
      // Animation has returned to its start playing in reverse
      // Perform some action, such as update UI
    }
});
#+end_src
** Value
This property is a double that represents the current value of the
animation. The value ranges from 0.0 to 1.0, where 0.0 represents the
start of the animation and 1.0 represents the end of the animation.
#+begin_src dart
  _animationCtl = AnimationController(
    duration: Duration(seconds: 1),
    vsync: this,
  )

  _animation = Tween(begin: 0.0, end: 12.0).animate(_animationCtl)

  _animationCtl.value = 0.5

  _animationCtl.forward();
#+end_src
* Tween
Tween is an object that defines a mapping between a range of values
of one type (e.g. double) to a range of values of another type (Color,
Size, Step, Rect etc)

In Flutter the Tween class is commonly used to define a mapping
between a range of visual values (e.g. Color, Size, Rect etc.) which
are then used to animate the visual appearance of widgets in the app.
* Predefined Tween
** ColorTween
An Animation that maps between the two colors.
#+begin_src dart
  _animationCtl = AnimationController(
    duration: Duration(seconds: 1),
    vsync: this,
  )

  _animation = ColorTween(
    begin: Colors.red,
    end: Colors.blue,
  ).animate(_animationCtl);

  _animationCtl.forward();
#+end_src
We have an ~AnimationController~ and a ~ColorTween~. We then create an
animation that maps between the two colors using the animate method
of the ~ColorTween~ object. Finally we start the animation by calling
the forward method on the animation controller.

Tween dose not animate by itself. Instead, it defines a mapping
between two values that can be used by an animation to create the
appearance of motion.
** DoubleTween
** IntTween
** SizeTween
** AlignmentTween
** BorderRadiusTween
** edgeInsetsTween
** Matrix4Tween
** RectTween
** TextStyleTween
** Int64Tween
** OffsetTween
** RelativeRectTween
** StepTween
** DecorationTween
** IntervalTween
* Curves
Define the rate of change of an animation over time.

Curves are typically combined with the Tween class to create a range
of values that an animation will interpolate between.
#+begin_src dart
  _controller = AnimationController(
    duration: const Duration(milliseconds: 300),
    vsync: this,
  )

  _colorTween = ColorTween(
    begin: Colors.green,
    end: Colors.red,
  ).animate(
    CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    )
  )
#+end_src
#+begin_src dart
  AnimatedPadding(
    curve: Curves.easeInOutCric,
    padding: EdgeInsets.all(padding),
    duration: const Duration(seconds: 1),
    child: const Text("Mina Farid"),
  )
#+end_src
* Vsync
It stands for "vertical synchronization" and its passed to an
AnimationController to synchronize the animation with the vertical
refresh rate of the device display.

To make sure that animations are smooth and consistent across
different devices. Because each device has different screen refresh
rate.

Refresh rate will be provided from ~TickerProviderStateMixin~

#+begin_src dart
  class _AnimatedBuilderWithTransformState extends State<AnimatedBuilderWithTransform> with SingleTickerProviderStateMixin {
    AnimationController? _controller;
    Animation<double>? _animation;

    @override
    void initState() {
      super.initState();
      _controller = AnimationController(
	duration: const Duration(seconds: 7),
	vsync: this,
      )
    }
  }
#+end_src
* ~SingleTickerProviderStateMixin~ vs ~TickerProviderStateMixin~
both mixins that provide a TickerProvider for the widget to know about
refresh rate of device screen.
** ~SingleTickerProviderStateMixin~
Is used when you have a single AnimationController in a widget.
** ~TickerProviderStateMixin~
Is used when you have multiple animations in a widget.
#+begin_src dart
  class MultipleAnimations extends StatefulWidget {
    @override
    _MulipleAnimationState createState() => _AnimatedBoxState();
  }

  class _MultipleAnimationState extends State<MultipleAnimations> with TickerProviderStateMixin {
    AnimationController _ctl1;
    AnimationController _ctl2;
    Animation<double> _animation1;
    Animation<double> _animation2;

    @override
    void initState() {
      super.initState();
      _ctl1 = AnimationController(
	duration: const Duration(seconds: 1),
	vsync: this,
      );
      _animation1 = Tween<double>(begin: 0, end: 1).animate(_ctl1);

      _ctl2 = AnimationController(
	duration: const Duration(seconds: 2),
	vsync: this,
      );
      _animation2 = Tween<double>(begin: 0, end: 1).animate(_ctl2);
    }

    @override
    void dispose() {
      _ctl1.dispose();
      _ctl2.dispose();
      super.dispose();
    }
  }
#+end_src
* Builders for Animation
** ~AnimatedBuilder~
Builder is used to create custom animations that depands on the value
of an Animation object. It rebuilds itself whenever the Animation
value changes and provides a callback function that can be used to
update the UI based on the current animation value.
#+begin_src dart
  widget build(BuildContext context) {
  
  }
#+end_src
** ~TweenAnimationBuilder~
This builder is used to animate a value based on a Tween object. It
interpolate between two values over time and provides a callback
function that can be used to update the UI based on the current
interpolate value.
** ~PageRouteBuilder~

** ~TransitionsBuilder~
